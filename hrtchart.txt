package main

import (
	"fmt"
	"log"
	"time"

	"github.com/xuri/excelize/v2"
)

func main() {
	// Create a new Excel file
	f := excelize.NewFile()
	sheetName := "Sheet1"
	f.SetSheetName(f.GetSheetName(f.GetActiveSheetIndex()), sheetName)

	// Create headers
	headers := []string{"Day", "Date", "Hormones", "Amount", "Notes"}
	for colIdx, header := range headers {
		cellRef, _ := excelize.CoordinatesToCellName(colIdx+1, 1)
		if err := f.SetCellValue(sheetName, cellRef, header); err != nil {
			log.Fatalf("failed to set header %q: %v", header, err)
		}
	}

	// Define a wrap-text style for the Hormones column
	wrapStyle, err := f.NewStyle(&excelize.Style{
		Alignment: &excelize.Alignment{
			WrapText: true,
			Vertical: "top",
		},
	})
	if err != nil {
		log.Fatalf("failed to create wrap-text style: %v", err)
	}

	// For each day (1..28), populate the rows
	for day := 1; day <= 28; day++ {
		row := day + 1 // row 2..29 in the sheet

		// A) Day
		dayCell, _ := excelize.CoordinatesToCellName(1, row)
		if err := f.SetCellValue(sheetName, dayCell, day); err != nil {
			log.Fatalf("failed to set Day: %v", err)
		}

		// B) Date (for example, using January 2024, day = 1..28)
		dateValue := time.Date(2024, time.January, day, 0, 0, 0, 0, time.UTC)
		dateCell, _ := excelize.CoordinatesToCellName(2, row)
		if err := f.SetCellValue(sheetName, dateCell, dateValue.Format("2006-01-02")); err != nil {
			log.Fatalf("failed to set Date: %v", err)
		}

		// C) Hormones (multiline cell)
		// We insert line breaks with "\n".
		hormoneCell, _ := excelize.CoordinatesToCellName(3, row)
		hormonesText := "Estrogen\nProgesterone\nTestosterone"
		if err := f.SetCellValue(sheetName, hormoneCell, hormonesText); err != nil {
			log.Fatalf("failed to set Hormones: %v", err)
		}
		// Apply the wrap text style to this cell
		if err := f.SetCellStyle(sheetName, hormoneCell, hormoneCell, wrapStyle); err != nil {
			log.Fatalf("failed to set style on Hormones cell: %v", err)
		}

		// D) Amount (just an example placeholder)
		amountCell, _ := excelize.CoordinatesToCellName(4, row)
		if err := f.SetCellValue(sheetName, amountCell, ""); err != nil {
			log.Fatalf("failed to set Amount: %v", err)
		}

		// E) Notes (another placeholder)
		notesCell, _ := excelize.CoordinatesToCellName(5, row)
		if err := f.SetCellValue(sheetName, notesCell, ""); err != nil {
			log.Fatalf("failed to set Notes: %v", err)
		}

		// Increase the row height to ensure the multi-line text is visible
		// (You can adjust this value as needed)
		if err := f.SetRowHeight(sheetName, row, 30); err != nil {
			log.Fatalf("failed to set row height: %v", err)
		}
	}

	// Auto-fit columns A..E (optional, though doesn't auto-adjust row height)
	// For a nicer layout, you might prefer setting fixed widths.
	for col := 1; col <= 5; col++ {
		colName, _ := excelize.ColumnNumberToName(col)
		if err := f.AutoFilter(sheetName, fmt.Sprintf("%s1:%s29", colName, colName), nil); err != nil {
			// Using AutoFilter with no criteria won't filter,
			// but sometimes helps with column sizing in some viewers.
			// Another approach is to set column widths manually:
			// f.SetColWidth(sheetName, colName, colName, 15)
		}
	}

	// Set the active sheet to our sheet
	sheetNameVal, _ := f.GetSheetIndex(sheetName)
	f.SetActiveSheet(sheetNameVal)

	// Save the file
	if err := f.SaveAs("HormonesSchedule.xlsx"); err != nil {
		log.Fatalf("failed to save file: %v", err)
	}

	log.Println("Spreadsheet generated successfully: HormonesSchedule.xlsx")
}
